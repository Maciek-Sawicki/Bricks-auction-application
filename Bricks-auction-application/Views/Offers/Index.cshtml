@model IEnumerable<Bricks_auction_application.Models.Offers.Offer>

@{
    ViewData["Title"] = "Offers";
    var currentSortOrder = ViewData["CurrentSortOrder"] != null ? ViewData["CurrentSortOrder"].ToString() : "Name_desc";
    var currentSortDirection = ViewData["CurrentSortDirection"] != null ? ViewData["CurrentSortDirection"].ToString() : "ascending";
    var searchString = ViewData["CurrentFilter"] as string;
}
<partial name="_Notification" />

<h2>Offers</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<form asp-action="Index" method="get" id="filterForm">
    <p>
        Min Price: <input type="number" name="minPrice" value="@ViewData["CurrentMinPrice"]" />
        Max Price: <input type="number" name="maxPrice" value="@ViewData["CurrentMaxPrice"]" />
        Sort by:
        <select name="sortOrder">
            <option value="Name" selected="@(ViewData["CurrentSortOrder"] as string == "Name" ? "selected" : "")">Name</option>
            <option value="Price" selected="@(ViewData["CurrentSortOrder"] as string == "Price" ? "selected" : "")">Price</option>
            <option value="OfferEndDateTime" selected="@(ViewData["CurrentSortOrder"] as string == "OfferEndDateTime" ? "selected" : "")">Offer End Date</option>
        </select>
        <select name="sortDirection">
            <option value="ascending" selected="@(ViewData["CurrentSortDirection"] as string == "ascending" ? "selected" : "")">Ascending</option>
            <option value="descending" selected="@(ViewData["CurrentSortDirection"] as string == "descending" ? "selected" : "")">Descending</option>
        </select>
        <input type="submit" value="Filter" />
    </p>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <p>Image</p>
            <th>
                    @Html.DisplayNameFor(model => model.LEGOSet.Name)
            </th>
            <th>
                    @Html.DisplayNameFor(model => model.User.Username)
            </th>
            <th>
                    @Html.DisplayNameFor(model => model.Price)
            </th>
            <th>
                    @Html.DisplayNameFor(model => model.OfferEndDateTime)
            </th>
            <th>

            </th>
            <th>

            </th>
            <th>

            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    <img src="@item.ImagePath" class="img-fluid" style="max-height: 100px;" />
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LEGOSet.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.User.Username)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Price)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.OfferEndDateTime)
                </td>




                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.OfferId }) |
                    @Html.ActionLink("Details", "Details", new { id = item.OfferId }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.OfferId })
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    // Obsługa zachowania formularza przy sortowaniu
    function sortOffers() {
        var sortOrder = document.getElementsByName("sortOrder")[0].value;
        var form = document.getElementById("filterForm");
        form.action = "/Offers?sortOrder=" + sortOrder;
        form.submit();
    }
</script>